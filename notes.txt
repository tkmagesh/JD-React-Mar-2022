Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodolgy:
    No powerpoints
    100% Hands on
    At least 50% of the participants of the participants should have completed the assignments

About You
    Name
    Experience
    Primary Skillset
    Experience in React (if any)

RIA (Rich Internet Applications)


Patterns Of Enterprise Applications Architecture (Martin Fowler)

HTML5 (Browser can behave like a Virtual OS)
    1. Client side data persistance
        LocalStorage
        SessionStorage
        IndexedDB
    2. Interact with other peripheral devices (webcam, microphone, etc)
        WebRTC
    3. Real time updates from server
        Server Sent Events
        Web Sockets
    4. Multithreading
        Web Workers
    5. Offline application access
        Offline Application Cache
        Service Workers

Salary Calculator
Assumptions:
    1. No validations are needed 
    2. The application implementation meets 100% of user expectations
    3. Another team is responsible for preparing the application for deployment
        Refactoring the js code to separate JS files
        minification
        uglification
    4. Testing is taken care by another team


Public
    this
    prototype 

Day-1 Study
    http://es6-features.org/
    Array Methods
        forEach
        filter
        map
        reduce

Components
    View Class that encapsulates Presentation + State + UI Behavior

ES6 (ECMAScript 6 / ES2015 / ESNext )
    1. let
    2. const
    3. Array destructuring
    4. Rest operator (Array)
    5. Spread operator (Array)
    6. Object destructuring
    7. Rest operator (Object)
    8. Spread operator (Object)
    9. default arguments
    10. Arrow functions
    11. Template Literals
    12. iterators (for .. of)
    13. classes

Code in ES6 -> transpiler (Babel) -> ES5


HTML vs JSX
    HTML
        Open tags without close tags are allowed
        "for" attribute is allowed
        "class" attribute is allowed
    JSX
        Every open tag must have the corresponding close tag
        Use "htmlFor" in place of "for"
        Use "className" in place of "class"


Day-2 Assignment
    Implement SalaryCalculator in React


Hooks
    functions to handle side effects in functional components
    hook functions must start with 'use'
    built in hooks
        useState
        useEffect
        useContext
        useReducer
        useCallback
        useMemo
        useRef
        useImperativeHandle
        useLayoutEffect
        useDebugValue

State (Data)
    1. Application State
        * Any data that supports the "core appliction logic" of the application
        * It is highly probable that this data is needed "through out" the application
        * DO NOT keep this data in the component itself
        * If this data is maintained in the component, changes to this data will be very difficult to reflect in other parts of the application
    2. UI State
        * Any data that supports the "presentation" needs of the application
        * It is highly UNLIKELY that this data is needed in other parts of the application
        * Feel free to maintain this data in the component itself (either using setState / useState )


Redux
    1. Always treat the current state as immutable in the reducer
    2. All the application logic  should in the action creator
        No application logic should in the reducer
        The reducer should be responsible ONLY for arriving at the "next" state in the store

To install yarn
    npm install yarn -g

To start the application
    yarn start

ES6 Module
    Everything defined in a js/jsx file is considered private by default
    To make an entity public, we need to export it
    To use an entity defined in another file, we have to import it
        

Components
reducers
actions
store

/bugs
    /components
    /reducers
    /actions
    index.js (Container Component)
/projects
    /components
    /reducers
    /actions
    index.js (Container Component)
/store
    index.js (Store)

react-redux

    to install 
        yarn add react-redux

    adapter that makes the react components interact with the redux
        useDispatch() => dispatch
        useSelector() => state

Container Components / Smart Components
    Components that interface with the Redux infrastructure (for state & dispatch)
    DO NOT interact with the user
    It is advicable to use fewer container components

Presentation Components / Dumb Components
    DO NOT interface with redux
    They receive data and action dispatchers from the container components
    They are the only components that interact with the user
    
Redux Middleware
    Any logic that has to be applied across actions

    
